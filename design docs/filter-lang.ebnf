Root ::= RootExpr+

RootExpr ::= Module | 
    Rib | 
    "view" Identifier 'contains' TypeIdentifier '{' RibBody '}' | 
    "prefix-list" Identifier '{' PrefixListbody '}' |
    "table" Identifier '{' TableBody '}' | 
    Comment

Module ::= "module" Identifier ForStatement WithStatement '{' ModuleBody '}'
ModuleBody ::= Define ModuleExpr+ Apply

ModuleExpr ::= Define |
   Term+ | 
   Action+ |
   'import' ForStatement '{' ImportBody '}'

Define ::= 'define' ForStatement  WithStatement '{' DefineBody '}'
DefineBody ::= ( ( 'use' Identifier ';' )? ( Identifier '=' CallExpr ';' )+ )+

Term ::= 'term' Identifier '{' TermBody '}' ForStatement WithStatement '{' DefineBody '}'
TermBody ::= (
      ('use' Identifier ';')?
      ( MatchOperator '{' (CallExpr ';')+ '}' )+
)+

Action ::= 'action' Identifier '{' ActionBody '}' ForStatement WithStatement '{' ActionBody '}'
ActionBody ::= ( CallExpr ';' )+

Apply ::= 'apply' ForStatement WithStatement '{' ApplyBody '}'
ApplyBody ::= ApplyScope+ ( AcceptReject ';' )?
ApplyScope ::= 
     ( 'use' Identifier ';' )?
     'filter' MatchOperator ArgExpr
     'not'? 'matching'
     '{' ( ArgExpr ';' ( AcceptReject ';' )? )+ '}' ';'

Rib ::= "rib" Identifier 'contains' TypeIdentifier '{' RibBody '}'
RibBody ::= ( Identifier ':' TypeIdentifier ','? )+

ForStatement ::= ( 'for' Identifier':' TypeIdentifier )?
WithStatement ::= ( 'with' ( Identifier ':' TypeIdentifier )+ )*

FieldExpr ::= Identifier ( '.' Identifier )+
ArgExprList ::= ( ArgExpr ','? )+
CallReceiver ::= Identifier | FieldExpr
CallExpr ::= CallReceiver '(' ArgExprList ')' ';'

ArgExpr ::= Identifier | 
  TypeIdentifier | 
  StringLiteral | 
  Bool | 
  CallExpr | 
  FieldExpr

Bool ::= 'true' | 'false'

MatchOperator ::= 'exactly-one' | 'some' | 'all'
AcceptReject ::= 'return'? ( 'accept' | 'reject' )
StringLiteral ::= '"' Identifier '"'

Identifier ::= ([a-z]) ([0-9a-z-_])*
TypeIdentifier ::= [A-Z] ([0-9a-zA-Z])*

Comment ::= '//' ( [^\n] )* '\n'
