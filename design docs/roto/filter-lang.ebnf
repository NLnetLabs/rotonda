Root ::= RootExpr+

RootExpr ::= Module | 
    Rib | 
    "view" Identifier 'contains' TypeIdentifier '{' RibBody '}' | 
    "prefix-list" Identifier '{' PrefixListbody '}' |
    "table" Identifier '{' TableBody '}' |
    Comment

Module ::= "module" Identifier 'for' Identifier WithStatement '{' ModuleBody '}'
ModuleBody ::= Define ModuleExpr+ Apply

ModuleExpr ::= Define |
   Term+ | 
   Action+ |
   'import' ForStatement '{' ImportBody '}'

Define ::= 'define' ForStatement  WithStatement '{' DefineBody '}'
DefineBody ::= ( ( 'use' Identifier ';' )? ( Identifier '=' ComputeExpr ';' )+ )+

Term ::= 'term' Identifier '{' TermBody '}' ForStatement WithStatement '{' DefineBody '}'
TermBody ::= (
      ('use' Identifier ';')?
      ( MatchOperator '{' (ComputeExpr ';')+ '}' )+
)+

Action ::= 'action' Identifier '{' ActionBody '}' ForStatement WithStatement '{' ActionBody '}'
ActionBody ::= ( ComputeExpr ';' )+

Apply ::= 'apply' ForStatement WithStatement '{' ApplyBody '}'
ApplyBody ::= ApplyScope+ ( AcceptReject ';' )?
ApplyScope ::= 
     ( 'use' Identifier ';' )?
     'filter' MatchOperator ValueExpr
     'not'? 'matching'
     '{' ( ValueExpr ';' ( AcceptReject ';' )? )+ '}' ';'

Rib ::= "rib" Identifier 'contains' TypeIdentifier '{' RibBody '}'

RibBody ::= ( Identifier ':' ( TypeIdentifier | '{' RecordTypeIdentifier '}' | '[' TypeIdentifier ']' ) ','?)+

RecordTypeIdentifier ::= '{' ( Identifier ':' TypeIdentifier | '{' RecordTypeIdentifier '}' ','? )+ '}'

ForStatement ::= ( 'for' Identifier ':' TypeIdentifier )?
WithStatement ::= ( 'with' ( Identifier ':' TypeIdentifier )+ )*

FieldExpr ::= Identifier ( '.' Identifier )+
ArgExprList ::= ( ValueExpr ','? )*
CallReceiver ::= Identifier | FieldExpr
ComputeExpr ::= CallReceiver '(' ValueExprList ')' ';'

ValueExpr ::= Identifier | TypeIdentifier | StringLiteral | Bool | ComputeExpr | FieldExpr | PrefixMatchExpr

MatchOperator ::= 'exactly-one' | 'some' | 'all'

MatchExpr ::= ValueExpr | GroupedExpr | CompareExpr | AndExpr | OrExpr | SetCompareExpr
CompareExpr ::= ValueExpr ( '==' | '!=' | '<' | '<=' | '>' | '>=' ) ValueExpr

PrefixMatchExpr ::= Prefix PrefixMatchType

PrefixMatchType ::= ( 'exact' | 'longer' | 'orlonger' | 
    'prefix-length-range' | 'upto' | 'through' | 'netmask' ) 
    ( PrefixLength | PrefixLengthRange | IpAddress )

IpAddress ::= IpV4Address | IpV6Address
Prefix ::= IpAddress PrefixLength
PrefixLength ::= '/' [0-9]+
PrefixLengthRange ::= PrefixLength '-' PrefixLength

AcceptReject ::= 'return'? ( 'accept' | 'reject' )

Identifier ::= ([a-z]) ([0-9a-z_-])*
TypeIdentifier ::= [A-Z] ([0-9a-zA-Z])*

Comment ::= '//' ( [^\n] )* '\n'

StringLiteral ::= '"' Identifier '"'
Bool ::= 'true' | 'false'
