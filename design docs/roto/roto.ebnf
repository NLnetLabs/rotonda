Root ::= RootExpr+

RootExpr ::= Module |
     "rib" Identifier 'contains' TypeIdentifier '{' RibBody '}' |
     "module" Identifier 'contains' TypeIdentifier '{' Module '}' |
     "table" Identifier '{' TableBody '}' |
     RecordTypeAssignment |
     Comment

Module ::= "module" ForStatement WithStatement '{' ModuleBody '}'
ModuleBody ::= Define ModuleExpr+ Apply

ModuleExpr ::= Define |
   Term+ | 
   Action+ |
   /* 'import' ForStatement '{' ImportBody '}' */

Define ::= 'define' ForStatement  WithStatement '{' DefineBody '}'
DefineBody ::= ( ( 'use' Identifier ';' )? ( Identifier '=' ComputeExpr ';' )+ )+

Term ::= 'term' Identifier '{' TermBody '}' ForStatement WithStatement '{' DefineBody '}'
TermBody ::= (
      ('use' Identifier ';')?
      ( MatchOperator '{' (ComputeExpr ';')+ '}' )+
)+

Action ::= 'action' Identifier '{' ActionBody '}' ForStatement WithStatement '{' ActionBody '}'
ActionBody ::= ( ActionExpr ';' )+
ActionExpr ::= ComputeExpr | GlobalMethod
GlobalMethod ::= MethodComputeExpr

Apply ::= 'apply' ForStatement WithStatement '{' ApplyBody '}'
ApplyBody ::= ApplyScope+ ( AcceptReject ';' )?
ApplyScope ::= 
     ( 'use' Identifier ';' )?
     'filter' MatchOperator ValueExpr
     'not'? 'matching'
     '{' ( ValueExpr ';' ( AcceptReject ';' )? )+ '}' ';'

Rib ::= "rib" Identifier 'contains' TypeIdentifier '{' RibBody '}'
Table ::= "table" Identifier 'contains' TypeIdentifier '{' TableBody '}'

RibBody ::= ( Identifier ':' ( TypeIdentifier | '{' RecordTypeIdentifier '}' | '[' TypeIdentifier ']' ) ','?)+
TableBody ::= ( Identifier ':' ( TypeIdentifier | '{' RecordTypeIdentifier '}' | '[' TypeIdentifier ']' ) ','?)+

RecordTypeIdentifier ::= ( Identifier ':' TypeIdentifier | '{' RecordTypeIdentifier '}' ','? )+
RecordTypeAssignment ::= "type" Identifier '{' RecordTypeIdentifier '}'

ForStatement ::= ( 'for' Identifier ':' TypeIdentifier )?
WithStatement ::= ( 'with' ( Identifier ':' TypeIdentifier )+ )*

FieldExpr ::= Identifier ( '.' Identifier )+
ArgExprList ::= ( ValueExpr ','? )*
CallReceiver ::= Identifier | FieldExpr
ComputeExpr ::= CallReceiver '(' ValueExprList ')' ';'
RecordValueExpr ::= ( Identifier ':' ValueExpr ','?)+


ValueExpr ::= Identifier | TypeIdentifier | StringLiteral | Bool | ComputeExpr | FieldExpr | PrefixMatchExpr | RecordValueExpr

MatchOperator ::= 'exactly-one' | 'some' | 'all' | 'matching'

MatchExpr ::= ValueExpr | GroupedExpr | CompareExpr | AndExpr | OrExpr | SetCompareExpr
CompareExpr ::= ValueExpr ( '==' | '!=' | '<' | '<=' | '>' | '>=' ) ValueExpr

PrefixMatchExpr ::= Prefix PrefixMatchType

PrefixMatchType ::= ( 'exact' | 'longer' | 'orlonger' | 
    'prefix-length-range' | 'upto' | 'through' | 'netmask' ) 
    ( PrefixLength | PrefixLengthRange | IpAddress )

IpAddress ::= IpV4Address | IpV6Address
Prefix ::= IpAddress PrefixLength
PrefixLength ::= '/' [0-9]+
PrefixLengthRange ::= PrefixLength '-' PrefixLength

AcceptReject ::= 'return'? ( 'accept' | 'reject' )

Identifier ::= ([a-z]) ([0-9a-z_-])*
TypeIdentifier ::= [A-Z] ([0-9a-zA-Z])*

StringLiteral ::= '"' Identifier '"'
BooleanLiteral ::= 'true' | 'false'
IntegerLiteral ::= (0-9)+
PrefixLengthLiteral ::= '/' (0-9)+
HexLiteral ::= '0x' (0-9A-Fa-f)+
AsnLiteral ::= 'AS' (0-9)+
FloatLiteral ::= (0-9)+'.'(0-9)+
ByteStringLiteral ::= '0x'((0-9A-Z)'_'?)+