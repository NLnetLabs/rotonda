filter-map adj-rib-in {
    define {
        rx nlri: Nlri;
        tx rib_in_post_route: RibInPostRoute with Key { peer_id, router_id };
        context this: Context;

        is_rib_in_post = false;
    }

    term is-rib-in-post {
        match this.nlri {
            Unicast(nlri) -> { this.provenance.rib_type == AjdRibInPost },
            Multicast(nlri) -> { this.provenance.rib_type == AjdRibInPost }
        }
    }

    action set-rib-in-post-true {
        is_rib_in_post = true;
    }

    action set-rib-in-post {
        rib_in_post_route.rib_in_post.set(is_rib_in_post);
        rib_in_post_route.peer_id.set(this.provenance.peer_id);
        rib_in_post_route.router_id.set(this.provenance.router_id);
    }

    apply {
        filter match is-rib-in-post {
            set-rib-in-post-true;
        }
        set-rib-in-post;
    }
}

type RibInPostRoute {
    peer_id: PeerId,
    router_id: String
    rib_in_post: Bool
}

// Context object

// NLRI properties
//
// .nlri: Nlri,           // NLRI for THIS
// .status: RouteStatus,  // status for THIS route
// .index: NlriIndex      // (MP_REACH | MP_UNREACH | announcement | withdrawal) & position in the NLRIs of the message

//                    enum routecore::Nlri
//                    routes
//                    struct Route: Unicast(BasicNlri),                     // (v4/v6, unicast)
//                    struct Route: Multicast(BasicNlri),                   // (v4/v6, multicast)

//                    routes+
//                    Mpls(MplsNlri),                         // (v4/v6, mpls unicast) 
//                    MplsVpn(MplsVpnNlri),                   // (v4/v6, mpls vpn unicast)

//                    non-routes
//                    Vpls(VplsNlri),                         // (l2vpn, vpls)
//                    FlowSpec: FlowSpec(FlowSpecNlri),                 // (v4/v6, flowspec)
//                    RouteTarget(RouteTargetNlri),           // (v4, route target)
//                    Evpn(EvpnNlri),

// Message Path Attributes
//
// .message {
//     aggregator_type
//     announcements: [Nlri],
//     as_path: AsPath,
//     as4_path: AsPath,
//     atomic_aggregate: AtomicAggregate,
//     communities: [Community],
//     local_pref: LocalPref,
//     multi_exit_discriminator: MultiExitDisc,
//     next_hop: NextHop,
//     origin_type: OriginType,
//     // TODO
//     withdrawals: [Nlri],
//     extended_communities: [Community],
//     large_communities: [Community]
//     ...
// }

// .provenance {
       // String from sysName, sysDescr (BMP) or BGP Identifier (BGP) as
       // String, or a user-defined string (set in the bgp-in unit)
//     router_id: RouterId,
       // (peer_address, peer_asn) (BMP/BGP)
//     peer_id: PeerId,
       // ([U8] the BGP Identifier) (BMP/BGP)
//     peer_bgp_id: PeerBgpId,
       // ([U8] 8 bytes, if any, multiple instance routers.
//     peer_distuingisher, 
       // AdjRibInPre | AdjRibInPost | AdjRibOutPre | AdjRibOutPost |
       // AdjRibLoc
//     peer_rib: RibType
       // from the per_peer_header (BMP) or generated by roto (BGP)
//     timestamp: u64,
//     // TODO
//     message_id: (RotondaId, LogicalTime, Hash)
// }

// ::routers [ router_id, ... ]
//  