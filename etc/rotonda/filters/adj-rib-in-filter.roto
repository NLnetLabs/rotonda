filter-map adj-rib-in {
    define {
        rx route: Unicast | MultiCast | MplsVpnNlri;
        tx rib_in_post_route: RibInPostRoute with Key { peer_id, router_id };
        context context: Context;

        is_rib_in_post = false;
    }

    term is-rib-in-post {
        context.provenance.rib_type == AjdRibInPost;
    }

    action set-rib-in-post-true {
        is_rib_in_post = true;
    }

    action set-rib-in-post {
        rib_in_post_route.rib_in_post.set(is_rib_in_post);
        rib_in_post_route.peer_id.set(context.provenance.peer_id);
        rib_in_post_route.router_id.set(context.provenance.router_id);
    }

    apply {
        filter match is-rib-in-post {
            set-rib-in-post-true;
        }
        set-rib-in-post;
    }
}

type RibInPostRoute {
    peer_id: PeerId,
    router_id: String
    rib_in_post: Bool
}

// Context object

// NLRI properties
//
// .nlri {
//     type: NlriType,
//     prefix: Prefix,            // prefix, if this NLRI is a route.
//     path_id: PathId            // Multipath ID, if any
//     afi_safi: AfiSafi,         // afi_safi for THIS route
//     status: RouteStatus,       // status for THIS route
// }

//                    Unicast(BasicNlri),                     // (v4/v6, unicast)
//                    Multicast(BasicNlri),                   // (v4/v6, multicast)
//                    Mpls(MplsNlri),                         // (v4/v6, mpls unicast) 
//                    MplsVpn(MplsVpnNlri),                   // (v4/v6, mpls vpn unicast)
//                    Vpls(VplsNlri),                         // (l2vpn, vpls)
//                    FlowSpec(FlowSpecNlri),                 // (v4/v6, flowspec)
//                    RouteTarget(RouteTargetNlri),           // (v4, route target)
//                    Evpn(EvpnNlri),


// Message properties
//
// .message {
//     aggregator_type
//     announcements: [Nlri],
//     as_path: AsPath,
//     as4_path: AsPath,
//     atomic_aggregate: AtomicAggregate,
//     communities: [Community],
//     local_pref: LocalPref,
//     multi_exit_discriminator: MultiExitDisc,
//     next_hop: NextHop,
//     origin_type: OriginType,
//     // TODO
//     withdrawals: [Nlri],
//     extended_communities: [Community],
//     large_communities: [Community]
//     ...
// }

// .provenance {
//     router_id: RouterId, // String from sysName, sysDescr (BMP) or BGP Identifier (BGP) as String, or a user-defined string (set in the bgp-in unit)
//     peer_id: PeerId,  // (peer_address, peer_asn) (BMP/BGP)
//     peer_bgp_id: PeerBgpId, // ([U8] the BGP Identifier) (BMP/BGP)
//     peer_distuingisher, // ([U8] 8 bytes, if any, multiple instance routers.
//     peer_rib: RibType // AdjRibInPre | AdjRibInPost | AdjRibOutPre | AdjRibOutPost | AdjRibLoc
//     timestamp: u64, // from the per_peer_header (BMP) or generated by roto (BGP)
// }

// ::routers [ router_id, ... ]
//  