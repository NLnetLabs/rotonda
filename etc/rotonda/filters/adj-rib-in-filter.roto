filter-map adj-rib-in {
    define {
        rx route: Route;
        tx rib_in_post_route: RibInPostRoute with Key { peer_id, router_id };
        is_rib_in_post = false;
    }

    term is-rib-in-post {
        ::packet.provenance.rib_type == AjdRibInPost;
    }

    action set-rib-in-post-true {
        is_rib_in_post = true;
    }

    action set-rib-in-post {
        rib_in_post_route.rib_in_post.set(is_rib_in_post);
        rib_in_post_route.peer_id.set(::packet.provenance.peer_id);
        rib_in_post_route.router_id.set(::packet.provenance.router_id);
    }

    apply {
        filter match is-rib-in-post {
            set-rib-in-post-true;
        }
        set-rib-in-post;
    }
}

type RibInPostRoute {
    peer_id: PeerId,
    router_id: String
    rib_in_post: Bool
}

// Route properties
//
// ::route {
//     prefix: Prefix,            // prefix, if any, for THIS route
//     path_id: PathId            // Multipath ID, if any
//     afi_safi: AfiSafi,         // afi_safi for THIS route
//     status: RouteStatus,       // status for THIS route
// }

// Packet properties
//
// ::packet {
//     path_attributes: PathAttributes, // path attributes, if any
//     // complete NLRI from the packet
//     nlri: Nlri, // Unicast(BasicNlri),                     // (v4/v6, unicast)
//                    Multicast(BasicNlri),                   // (v4/v6, multicast)
//                    Mpls(MplsNlri),                         // (v4/v6, mpls unicast) 
//                    MplsVpn(MplsVpnNlri),                   // (v4/v6, mpls vpn unicast)
//                    Vpls(VplsNlri),                         // (l2vpn, vpls)
//                    FlowSpec(FlowSpecNlri),                 // (v4/v6, flowspec)
//                    RouteTarget(RouteTargetNlri),           // (v4, route target)
//                    Evpn(EvpnNlri),
//     timestamp: u64, // from the per_peer_header (BMP) or generated by roto (BGP)
//     provenance: {
//         router_id: RouterId, // String from sysName, sysDescr (BMP) or BGP Identifier (BGP) as String, or a user-defined string (set in the bgp-in unit)
//         peer_id: PeerId,  // (peer_address, peer_asn) (BMP/BGP)
//         peer_bgp_id: PeerBgpId, // ([U8] the BGP Identifier) (BMP/BGP)
//         peer_distuingisher, // ([U8] 8 bytes, if any, multiple instance routers.
//         peer_rib: RibType // AdjRibInPre | AdjRibInPost | AdjRibOutPre | AdjRibOutPost | AdjRibLoc
//
//     },
// }
//
// ::routers [ router_id, ... ]
//  