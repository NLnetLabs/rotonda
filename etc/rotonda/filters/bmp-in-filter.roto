filter-map bmp-in-filter {
    define {
        rx bmp_msg: BmpMessage;
        tx out_msg: SplitOut;
        filtered_asn = AS65000;
    }

    term filtered-asn {
        match bmp_msg with {
            PeerDownNotification(pd_msg) -> {
                pd_msg.per_peer_header.asn == filtered_asn;
            },
           PeerUpNotification(pu_msg) -> {
                pu_msg.per_peer_header.asn == filtered_asn;
           },
           RouteMonitoring(rm_msg) -> {
                rm_msg.per_peer_header.asn == filtered_asn;
           },
           StatisticsReport(sr_msg) -> {
                sr_msg.per_peer_header.asn == filtered_asn;
           }
       }
    }

    term is-post-policy {
        match bmp_msg with {
            RouteMonitoring(rm_msg) -> {
                rm_msg.per_peer_header.is_post_policy;
            }
        }
    }

    apply {
        filter match filtered-asn matching { return reject; };
        filter match is-post-policy {
            // return accept.and_send(rx, out_msg.left);
            return accept;
        };
        // accept.and_send(rx, out_msg.right);
        return accept;
    }
}

type SplitOut { left: BmpMessage, right: BmpMessage }